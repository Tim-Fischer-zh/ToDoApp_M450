name: Build, Test & Deploy

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build:
    name: Build Docker Images
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build API Docker image
        run: |
          docker build -f TodoApi/Dockerfile -t todoapi:${{ github.sha }} .

      - name: Build Nginx Docker image
        run: |
          docker build -f deploy/nginx/Dockerfile -t todoapi-web:${{ github.sha }} .

  test:
    name: Run Tests
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests in Docker
        run: |
          docker build --target test -f TodoApi/Dockerfile -t todoapi-test:${{ github.sha }} .

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: [build, test]
    if: github.ref == 'refs/heads/main'

    env:
      POSTGRES_DB: todoapi
      POSTGRES_USER: todoapi_user
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_ISSUER: https://nuvaro.xyz
      JWT_AUDIENCE: https://nuvaro.xyz
      DOTNET_ENVIRONMENT: Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tag images for deployment
        run: |
          docker tag todoapi:${{ github.sha }} todoapi:latest
          docker tag todoapi-web:${{ github.sha }} todoapi-web:latest

      - name: Stop existing containers
        run: |
          docker compose --profile prod down || true

      - name: Start services
        run: |
          docker compose --profile prod up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 15

          # Check container health status using docker compose
          MAX_RETRIES=30
          RETRY_COUNT=0

          until [ "$(docker inspect --format='{{.State.Health.Status}}' todoapi_backend)" == "healthy" ] || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            echo "Waiting for API to be healthy... ($RETRY_COUNT/$MAX_RETRIES)"
            RETRY_COUNT=$((RETRY_COUNT+1))
            sleep 5
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "API health check failed!"
            docker compose --profile prod logs api
            exit 1
          fi

          echo "API is healthy!"

      - name: Run database migrations
        run: |
          # Migrations are automatically applied on app startup via EF Core
          echo "Database migrations are handled automatically on startup"

      - name: Verify deployment
        run: |
          echo "Checking all services..."
          docker compose --profile prod ps

          # Check Nginx health status
          if [ "$(docker inspect --format='{{.State.Health.Status}}' todoapi_web)" != "healthy" ]; then
            echo "Nginx health check failed!"
            docker logs todoapi_web
            exit 1
          fi

          # Check Cloudflared is running
          if [ "$(docker inspect --format='{{.State.Status}}' todoapi_cloudflared)" != "running" ]; then
            echo "Cloudflared is not running!"
            docker logs todoapi_cloudflared
            exit 1
          fi

          echo "All services are running and healthy!"

      - name: Cleanup old images
        run: |
          docker image prune -f

      - name: Show service logs (last 50 lines)
        if: always()
        run: |
          docker compose --profile prod logs --tail=50
